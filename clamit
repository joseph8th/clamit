#!/usr/bin/env bash

source $HOME/.clamit/clamitrc


OPTIONS="y N"
SCANDEV=
MNTPTS=0

function printhelp {
    printf "usage: clamit { 
                install {clam [-a | -p], cmd, launch, update}
                fresh
                mount [-u]
                scan [device | tree]
                clean [logfile] 
}\n\n" 
    exit 1
}



function check_clamit {
    [ ! -e "$CLAMIT_TMP" ] && mkdir $CLAMIT_TMP
}



function get_clamav_pacman {
    sudo pacman -Syy
    sudo pacman -S clamav

    echo "Update /etc/pacman.conf and retry ClamAV install? [y/N]"
    select opt in $OPTIONS; do
	if [ "$opt" = "y" ]; then
	    sudo mv /etc/pacman.conf.pacnew /etc/pacman.conf
	    get_clamav_pacman
	fi
    done

    echo "Update /etc/clamav/freshclam.conf and /etc/clamav/clamd.conf? [y/N]"
    select opt in $OPTIONS; do
	if [ "$opt" = "y" ]; then
	    sudo sed -i.bak "s/Example//g" /etc/clamav/freshclam.conf
	    sudo sed -i.bak "s/Example//g" /etc/clamav/clamd.conf
	fi
    done
}



function get_clamav_apt {
    sudo apt-get update
    sudo apt-get install clamav
}



function install_clamit_cmd {
    [[ ! -f "$CLAMIT_CMD" ]] && sudo ln -s ${CLAMIT_ROOT}/clamit $CLAMIT_CMD
}



function install_launchers {
    [[ ! -d "$CLAMIT_SKEL" ]] && echo "'skel' launchers not found" && exit 1

    # found the 'skel' dir now append appz to launch using env vars
    echo "Exec=${CLAMIT_ROOT}/launchit.sh lsblk" \
	>> ${CLAMIT_SKEL}/List-Drives.desktop
    echo "Path=${CLAMIT_ROOT}" >> ${CLAMIT_SKEL}/List-Drives.desktop

    echo "Exec=${CLAMIT_ROOT}/launchit.sh \"clamit fresh\"" \
	>> ${CLAMIT_SKEL}/ClamIt-Fresh.desktop
    echo "Path=${CLAMIT_ROOT}" >> ${CLAMIT_SKEL}/ClamIt-Fresh.desktop

    echo "Exec=${CLAMIT_ROOT}/launchit.sh \"clamit scan\"" \
	>> ${CLAMIT_SKEL}/ClamIt-Scan.desktop
    echo "Path=${CLAMIT_ROOT}" >> ${CLAMIT_SKEL}/ClamIt-Scan.desktop

    echo "Exec=${CLAMIT_ROOT}/launchit.sh \"clamit clean\"" \
	>> ${CLAMIT_SKEL}/ClamIt-Clean.desktop
    echo "Path=${CLAMIT_ROOT}" >> ${CLAMIT_SKEL}/ClamIt-Clean.desktop

    cp ${CLAMIT_SKEL}/*.desktop ${HOME}/Desktop

    cp ${CLAMIT_ROOT}/clamitrc ${HOME}/.config
}


function update_clamit {
    git pull
}



function mountdev {

    # make sure /mnt/clamit/ptX exist...
    if [ ! -d $MNTROOT ]; then
	sudo mkdir $MNTROOT
	for x in 1 2 3 4; do
	    sudo mkdir ${MNTROOT}/pt${x}
	done
    fi

    # let user choose the SCSI device from /dev/ ...
    devary=
    x=0
    for d in /dev/sd?; do
	echo "${x}) $d"
	devary[x]=$d
	let x=x+1
    done
    let x=x-1
    printf "Choose a device to scan [0-${x}]: "
    read choice

    SCANDEV=${devary[${choice}]}

    # mount each partition of the chosen device in /mnt/clamit/ptX
    MNTPTS=0
    for p in ${SCANDEV}[1-4]; do
	let MNTPTS=MNTPTS+1
	echo "Mounting $p in ${MNTROOT}/pt${MNTPTS} ..."
	sudo mount -w $p ${MNTROOT}/pt${MNTPTS} 
    done
}


function umountdev {
    MNTPTS=4
    echo "Unmounting $MNTPTS mount points ..."
    while [ $MNTPTS -gt 0 ]; do
	sudo umount ${MNTROOT}/pt${MNTPTS}
	let MNTPTS=$MNTPTS-1
    done
}


function scan {
    # choose a device to mount and clamscan

    target=
    if [ -z $1 ]; then
	mountdev
	target=$MNTROOT
    else
	target=$1
    fi

    [ -f $LOGFILE ] && sudo rm $LOGFILE

    printf "\nScanning $target for viruses ...\n"
    sudo clamscan -r -i -l ${LOGFILE} $target

    umountdev
}


# process the clamscan log file
function clean {
    logf=
    if [ -z $1 ]; then
	logf=$LOGFILE
    else
	logf=$1
    fi

    sudo $CLAMIT_ROOT/src/clamit.py $LOGFILE
}


#### 'main' function ####
function _main {

    if [ -z $1 ]; then
	cmd="-h"
    fi

    check_clamit

    case $1 in
	install)
	    case $2 in
		clam)
		    case $3 in
			-p)
			    get_clamav_pacman
			    ;;
			*)
			    get_clamav_apt
			    ;;
		    esac
		    ;;
		cmd)
		    install_clamit_cmd
		    ;;
		launch)
		    install_launchers
		    ;;
		update)
		    update_clamit
		    ;;
		*)
		    print_help
		    ;;
	    esac
	    ;;
	fresh)
	    sudo freshclam
	    ;;
	mount)
	    case $2 in
		-u)
		    umountdev
		    ;;
		*)
		    mountdev
		    ;;
	    esac
	    ;;

	scan)
	    scan $2
	    ;;
	clean)
	    clean $2
	    ;;
	*)
	    printhelp
	    ;;
    esac
}

_main $@

exit
